---------------------------------------------------------------------------
-- $Id: medley-firebird-create.sql,v 1.1 2004/04/09 16:29:53 maciek Exp $
-- 
-- Create the database structure for Medley application.
-- 
-- author:  Maciek Makowski
-- version: $Revision: 1.1 $ 
-- date:    $Date: 2004/04/09 16:29:53 $
---------------------------------------------------------------------------

---------------------------------------------------------------------------
-- Default user that connects to the database
CREATE USER medley PASSWORD medley ADMIN;


---------------------------------------------------------------------------
-- The basic entities: Albums, Records and Tracks

--
-- Albums
--
CREATE MEMORY TABLE ALBUMS (
  albumId INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
  alb_title VARCHAR(100) NOT NULL,
  alb_originalReleaseYear DECIMAL(4),
  alb_releaseYear DECIMAL(4),
  alb_label VARCHAR(40),
  alb_length TIME,
  alb_removed TIMESTAMP,
  alb_int_artistCache VARCHAR(255),		-- cache for main artists
  alb_int_artistSortString VARCHAR(255),	-- sort string for artists
  alb_comments VARCHAR(15000)
);
GRANT ALL ON ALBUMS TO medley;

--
-- Records
--
CREATE MEMORY TABLE RECORDS (
  recordId INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
  rec_album INTEGER NOT NULL, 
  rec_title VARCHAR(100),
  rec_number DECIMAL(3),
  rec_length TIME, 
  rec_removed TIMESTAMP,
  rec_int_artistCache VARCHAR(255),		-- cache for main artists
  rec_int_artistSortString VARCHAR(255),	-- sort string for artists
  rec_comments VARCHAR(15000),
  CONSTRAINT RECORDS_FK_ALBUMS FOREIGN KEY (rec_album) REFERENCES ALBUMS(albumId) ON DELETE CASCADE
);
GRANT ALL ON RECORDS TO medley;

--
-- Tracks
--
CREATE CACHED TABLE TRACKS (
  trackId INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
  trk_record INTEGER NOT NULL,
  trk_title VARCHAR(100),
  trk_number DECIMAL(3),
  trk_length TIME,
  trk_removed TIMESTAMP, 
  trk_int_artistCache VARCHAR(255),		-- cache for main artists
  trk_int_artistSortString VARCHAR(255),	-- sort string for artists
  trk_comments VARCHAR(15000),
  CONSTRAINT TRACKS_FK_RECORDS FOREIGN KEY (trk_record) REFERENCES RECORDS(recordId) ON DELETE CASCADE
);
GRANT ALL ON TRACKS TO medley;


---------------------------------------------------------------------------
-- The Artists and their links with Albums, Records and 
-- Tracks

--
-- Artists
--
CREATE MEMORY TABLE ARTISTS (
  artistId INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
  art_name VARCHAR(100) NOT NULL,
  art_sortName VARCHAR(100) NOT NULL,
  art_type CHAR(10) NOT NULL, -- individual or ensemble
  art_comments VARCHAR(15000),
  CONSTRAINT ARTISTS_UQ_name UNIQUE (art_name),
  CONSTRAINT ARTISTS_UQ_sortName UNIQUE (art_sortName)
);
GRANT ALL ON ARTISTS TO medley;

--
-- Album Artists
--
CREATE CACHED TABLE ALBUM_ARTISTS (
  albumArtistId INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
  lar_album INTEGER NOT NULL,
  lar_artist INTEGER NOT NULL,
  lar_role VARCHAR(30) NOT NULL,
  lar_main DECIMAL(1) NOT NULL,
  CONSTRAINT ALBUM_ARTISTS_FK_ALBUMS FOREIGN KEY (lar_album) REFERENCES ALBUMS(albumId) ON DELETE CASCADE,
  CONSTRAINT ALBUM_ARTISTS_FK_ARTISTS FOREIGN KEY (lar_artist) REFERENCES ARTISTS(artistId) ON DELETE CASCADE,
  CONSTRAINT ALBUM_ARTISTS_UQ_album_artist_role UNIQUE (lar_album, lar_artist, lar_role)
);
GRANT ALL ON ALBUM_ARTISTS TO medley;

--
-- Record Artists
--
CREATE CACHED TABLE RECORD_ARTISTS (
  recordArtistId INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
  rar_record INTEGER NOT NULL,
  rar_artist INTEGER NOT NULL,
  rar_role VARCHAR(30) NOT NULL,
  rar_main DECIMAL(1) NOT NULL,
  CONSTRAINT RECORD_ARTISTS_FK_RECORDS FOREIGN KEY (rar_record) REFERENCES RECORDS(recordId) ON DELETE CASCADE,
  CONSTRAINT RECORD_ARTISTS_FK_ARTISTS FOREIGN KEY (rar_artist) REFERENCES ARTISTS(artistId) ON DELETE CASCADE,
  CONSTRAINT RECORD_ARTISTS_UQ_record_artist_role UNIQUE (rar_record, rar_artist, rar_role)
);
GRANT ALL ON RECORD_ARTISTS TO medley;

--
-- Track Artists
--
CREATE CACHED TABLE TRACK_ARTISTS (
  trackArtistId INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
  tar_track INTEGER NOT NULL,
  tar_artist INTEGER NOT NULL,
  tar_role VARCHAR(30) NOT NULL,
  tar_main DECIMAL(1) NOT NULL,
  CONSTRAINT TRACK_ARTISTS_FK_TRACKS FOREIGN KEY (tar_track) REFERENCES TRACKS(trackId) ON DELETE CASCADE,
  CONSTRAINT TRACK_ARTISTS_FK_ARTISTS FOREIGN KEY (tar_artist) REFERENCES ARTISTS(artistId) ON DELETE CASCADE,
  CONSTRAINT TRACK_ARTISTS_UQ_track_artist_role UNIQUE (tar_track, tar_artist, tar_role)
);
GRANT ALL ON TRACK_ARTISTS TO medley;


---------------------------------------------------------------------------
-- The Tags, Tag Groups, Tag Values  and their links with Albums, Records, 
-- Tracks and Artists

--
-- Tag Groups (dictionary)
--
CREATE MEMORY TABLE TAG_GROUPS (
  tagGroupId INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
  tgr_name VARCHAR(30) NOT NULL,
  tgr_parent INTEGER, 
  CONSTRAINT TAG_GROUPS_FK_TAG_GROUPS FOREIGN KEY (tgr_parent) REFERENCES TAG_GROUPS(tagGroupId), 
  CONSTRAINT TAG_GROUPS_UQ_name_parent UNIQUE (tgr_name, tgr_parent)
);
GRANT ALL ON TAG_GROUPS TO medley;

--
-- Tags
--
CREATE MEMORY TABLE TAGS (
  tagId INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
  tag_name VARCHAR(30) NOT NULL,
  tag_appliesTo CHAR(6) NOT NULL, -- album, record, track or artist
  tag_type CHAR(4) DEFAULT 'text' NOT NULL, -- text, enum or list
  tag_tagGroup INTEGER,
  CONSTRAINT TAGS_FK_TAG_GROUPS FOREIGN KEY (tag_tagGroup) REFERENCES TAG_GROUPS(tagGroupId),
  CONSTRAINT TAGS_UQ_name_appliesTo_tagGroup UNIQUE (tag_name, tag_appliesTo, tag_tagGroup)
);
GRANT ALL ON TAGS TO medley;

--
-- Tag Values
--
CREATE MEMORY TABLE TAG_VALUES (
  tagValueId INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
  tvl_tag INTEGER NOT NULL,
  tvl_value VARCHAR(100) NOT NULL,
  CONSTRAINT TAG_VALUES_FK_TAGS FOREIGN KEY (tvl_tag) REFERENCES TAGS(tagId) ON DELETE CASCADE,
  CONSTRAINT TAG_VALUES_UQ_tag_value UNIQUE (tvl_tag, tvl_value)
);
GRANT ALL ON TAG_VALUES TO medley;

--
-- Album Tags
--
CREATE CACHED TABLE ALBUM_TAGS (
  albumTagId INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
  ltg_album INTEGER NOT NULL,
  ltg_tag INTEGER NOT NULL,
  ltg_value VARCHAR(100) NOT NULL,
  CONSTRAINT ALBUM_TAGS_FK_ALBUMS FOREIGN KEY (ltg_album) REFERENCES ALBUMS(albumId) ON DELETE CASCADE,
  CONSTRAINT ALBUM_TAGS_FK_TAGS FOREIGN KEY (ltg_tag) REFERENCES TAGS(tagId) ON DELETE CASCADE,
  CONSTRAINT ALBUM_TAGS_UQ_album_tag UNIQUE (ltg_album, ltg_tag)
);
GRANT ALL ON ALBUM_TAGS TO medley;

--
-- Record Tags
--
CREATE CACHED TABLE RECORD_TAGS (
  recordTagId INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
  rtg_record INTEGER NOT NULL,
  rtg_tag INTEGER NOT NULL,
  rtg_value VARCHAR(100) NOT NULL,
  CONSTRAINT RECORD_TAGS_FK_RECORDS FOREIGN KEY (rtg_record) REFERENCES RECORDS(recordId) ON DELETE CASCADE,
  CONSTRAINT RECORD_TAGS_FK_TAGS FOREIGN KEY (rtg_tag) REFERENCES TAGS(tagId) ON DELETE CASCADE,
  CONSTRAINT RECORD_TAGS_UQ_record_tag UNIQUE (rtg_record, rtg_tag)
);
GRANT ALL ON RECORD_TAGS TO medley;

--
-- Track Tags
--
CREATE CACHED TABLE TRACK_TAGS (
  trackTagId INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
  ttg_track INTEGER NOT NULL,
  ttg_tag INTEGER NOT NULL,
  ttg_value VARCHAR(100) NOT NULL,
  CONSTRAINT TRACK_TAGS_FK_TRACKS FOREIGN KEY (ttg_track) REFERENCES TRACKS(trackId) ON DELETE CASCADE,
  CONSTRAINT TRACK_TAGS_FK_TAGS FOREIGN KEY (ttg_tag) REFERENCES TAGS(tagId) ON DELETE CASCADE,
  CONSTRAINT TRACK_TAGS_UQ_track_tag UNIQUE (ttg_track, ttg_tag)
);
GRANT ALL ON TRACK_TAGS TO medley;

--
-- Artist Tags
--
CREATE CACHED TABLE ARTIST_TAGS (
  artistTagId INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
  atg_artist INTEGER NOT NULL,
  atg_tag INTEGER NOT NULL,
  atg_value VARCHAR(100) NOT NULL,
  CONSTRAINT ARTIST_TAGS_FK_ARTISTS FOREIGN KEY (atg_artist) REFERENCES ARTISTS(artistId) ON DELETE CASCADE,
  CONSTRAINT ARTIST_TAGS_FK_TAGS FOREIGN KEY (atg_tag) REFERENCES TAGS(tagId) ON DELETE CASCADE,
  CONSTRAINT ARTIST_TAGS_UQ_artist_tag UNIQUE (atg_artist, atg_tag)
);
GRANT ALL ON ARTIST_TAGS TO medley;


---------------------------------------------------------------------------
-- The Ratings, their Groups and links with other entities

--
-- Rating Groups
--
CREATE MEMORY TABLE RATING_GROUPS (
  ratingGroupId INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
  rgr_name VARCHAR(50) NOT NULL,
  rgr_parent INTEGER,
  CONSTRAINT RATING_GROUPS_FK_RATING_GROUPS FOREIGN KEY (rgr_parent) REFERENCES RATING_GROUPS(ratingGroupId),
  CONSTRAINT RATING_GROUPS_UQ_name_parent UNIQUE (rgr_name, rgr_parent)
);
GRANT ALL ON RATING_GROUPS TO medley;

--
-- Ratings
--
CREATE MEMORY TABLE RATINGS (
  ratingId INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
  rat_name VARCHAR(50) NOT NULL,
  rat_appliesTo CHAR(6) NOT NULL, -- album, record, track or artist
  rat_type CHAR(12) NOT NULL, -- decimal, letter, percentage or whole number
  rat_minValue DECIMAL(6) NOT NULL,
  rat_maxValue DECIMAL(6) NOT NULL,
  rat_ratingGroup INTEGER, 
  CONSTRAINT RATINGS_FK_RATING_GROUPS FOREIGN KEY (rat_ratingGroup) REFERENCES RATING_GROUPS(ratingGroupId),
  CONSTRAINT RATINGS_UQ_name_appliesTo_ratingGroup UNIQUE (rat_name, rat_appliesTo, rat_ratingGroup)
);
GRANT ALL ON RATINGS TO medley;

--
-- Album Ratings
--
CREATE CACHED TABLE ALBUM_RATINGS (
  albumRatingId INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
  lra_album INTEGER NOT NULL,
  lra_rating INTEGER NOT NULL,
  lra_dateTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL ,
  lra_score DECIMAL(4) NOT NULL,
  CONSTRAINT ALBUM_RATINGS_FK_ALBUMS FOREIGN KEY (lra_album) REFERENCES ALBUMS(albumId) ON DELETE CASCADE,
  CONSTRAINT ALBUM_RATINGS_FK_RATINGS FOREIGN KEY (lra_rating) REFERENCES RATINGS(ratingId) ON DELETE CASCADE
);
GRANT ALL ON ALBUM_RATINGS TO medley;

--
-- Record Ratings
--
CREATE CACHED TABLE RECORD_RATINGS (
  recordRatingId INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
  rra_record INTEGER NOT NULL,
  rra_rating INTEGER NOT NULL,
  rra_dateTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
  rra_score DECIMAL(4) NOT NULL,
  CONSTRAINT RECORD_RATINGS_FK_RECORDS FOREIGN KEY (rra_record) REFERENCES RECORDS(recordId) ON DELETE CASCADE,
  CONSTRAINT RECORD_RATINGS_FK_RATINGS FOREIGN KEY (rra_rating) REFERENCES RATINGS(ratingId) ON DELETE CASCADE
);
GRANT ALL ON RECORD_RATINGS TO medley;

--
-- Track Ratings
--
CREATE CACHED TABLE TRACK_RATINGS (
  trackRatingId INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
  tra_track INTEGER NOT NULL,
  tra_rating INTEGER NOT NULL,
  tra_dateTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
  tra_score DECIMAL(4) NOT NULL,
  CONSTRAINT TRACK_RATINGS_FK_TRACKS FOREIGN KEY (tra_track) REFERENCES TRACKS(trackId) ON DELETE CASCADE,
  CONSTRAINT TRACK_RATINGS_FK_RATINGS FOREIGN KEY (tra_rating) REFERENCES RATINGS(ratingId) ON DELETE CASCADE
);
GRANT ALL ON TRACK_RATINGS TO medley;

--
-- Artist Ratings
--
CREATE CACHED TABLE ARTIST_RATINGS (
  artistRatingId INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
  ara_artist INTEGER NOT NULL,
  ara_rating INTEGER NOT NULL,
  ara_dateTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
  ara_score DECIMAL(4) NOT NULL,
  CONSTRAINT ARTIST_RATINGS_FK_ARTISTS FOREIGN KEY (ara_artist) REFERENCES ARTISTS(artistId) ON DELETE CASCADE,
  CONSTRAINT ARTIST_RATINGS_FK_RATINGS FOREIGN KEY (ara_rating) REFERENCES RATINGS(ratingId) ON DELETE CASCADE
);
GRANT ALL ON ARTIST_RATINGS TO medley;


---------------------------------------------------------------------------
-- The Auditions

--
-- Album Auditions
--
CREATE CACHED TABLE ALBUM_AUDITIONS (
  albumAuditionId INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
  lau_album INTEGER NOT NULL,
  lau_auditionDate DATE NOT NULL,
  lau_auditionTime TIME,
  lau_recordCount DECIMAL(3) NOT NULL,
  CONSTRAINT ALBUM_AUDITIONS_FK_ALBUMS FOREIGN KEY (lau_album) REFERENCES ALBUMS(albumId) ON DELETE CASCADE
);
GRANT ALL ON ALBUM_AUDITIONS TO medley;

--
-- Record Auditions
--
CREATE CACHED TABLE RECORD_AUDITIONS (
  recordAuditionId INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
  rau_record INTEGER NOT NULL,
  rau_auditionDate DATE NOT NULL,
  rau_auditionTime TIME,
  rau_trackCount DECIMAL(3) NOT NULL,
  CONSTRAINT RECORD_AUDITIONS_FK_RECORDS FOREIGN KEY (rau_record) REFERENCES RECORDS(recordId) ON DELETE CASCADE
);
GRANT ALL ON RECORD_AUDITIONS TO medley;

--
-- Track Auditions
--
CREATE CACHED TABLE TRACK_AUDITIONS (
  trackAuditionId INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
  tau_track INTEGER NOT NULL,
  tau_auditionDate DATE NOT NULL,
  tau_auditionTime TIME,
  CONSTRAINT TRACK_AUDITIONS_FK_TRACKS FOREIGN KEY (tau_track) REFERENCES TRACKS(trackId) ON DELETE CASCADE
);
GRANT ALL ON TRACK_AUDITIONS TO medley;


---------------------------------------------------------------------------
-- The Borrowers and Loans

--
-- Borrowers
--
CREATE MEMORY TABLE BORROWERS (
  borrowerId INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
  bor_firstName VARCHAR(40) NOT NULL,
  bor_surname VARCHAR(40) NOT NULL,
  bor_email VARCHAR(40),
  CONSTRAINT BORROWERS_UQ_firstName_surname_email UNIQUE (bor_firstName, bor_surname, bor_email)
);
GRANT ALL ON BORROWERS TO medley;

--
-- Album Loans
--
CREATE CACHED TABLE ALBUM_LOANS (
  albumLoanId INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
  lln_album INTEGER NOT NULL,
  lln_borrower INTEGER NOT NULL,
  lln_dateLent DATE NOT NULL,
  lln_dateReturned DATE,
  CONSTRAINT ALBUM_LOANS_FK_ALBUMS FOREIGN KEY (lln_album) REFERENCES ALBUMS(albumId) ON DELETE CASCADE,
  CONSTRAINT ALBUM_LOANS_FK_BORROWERS FOREIGN KEY (lln_borrower) REFERENCES BORROWERS(borrowerId) ON DELETE CASCADE
);
GRANT ALL ON ALBUM_LOANS TO medley;

--
-- Record Loans
--
CREATE CACHED TABLE RECORD_LOANS (
  recordLoanId INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
  rln_record INTEGER NOT NULL,
  rln_borrower INTEGER NOT NULL,
  rln_dateLent DATE NOT NULL,
  rln_dateReturned DATE,
  CONSTRAINT RECORD_LOANS_FK_RECORDS FOREIGN KEY (rln_record) REFERENCES RECORDS(recordId) ON DELETE CASCADE,
  CONSTRAINT RECORD_LOANS_FK_BORROWERS FOREIGN KEY (rln_borrower) REFERENCES BORROWERS(borrowerId) ON DELETE CASCADE
);
GRANT ALL ON RECORD_LOANS TO medley;
